-- QUERY TXT
    
-- Create//
-- Tabla de Usuarios
CREATE TABLE Users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(10) NOT NULL DEFAULT 'friend' CHECK (role IN ('admin', 'operator', 'friend')),
    phone VARCHAR(20),
    address TEXT,
    country VARCHAR(50)
);

-- Tabla de Especies
CREATE TABLE Species (
    id INT AUTO_INCREMENT PRIMARY KEY,
    commercial_name VARCHAR(100) NOT NULL,
    scientific_name VARCHAR(100) NOT NULL,
    availability_date DATETIME -- Fecha en la que el árbol de esta especie estará disponible para la venta
);

-- Tabla de Árboles
CREATE TABLE Trees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    species_id INT NOT NULL,
    owner_id INT DEFAULT 1, -- Asignar un valor predeterminado de 1 (Administrador)
    height DECIMAL(10, 2) DEFAULT 1, -- Asignar un tamaño por defecto de 1 
    location TEXT,
    available BOOLEAN NOT NULL DEFAULT FALSE, -- Cambiado a BOOLEAN con valor por defecto FALSE
    price DECIMAL(10, 2),
    photo_url VARCHAR(255),
    CONSTRAINT FK_Species_Trees FOREIGN KEY (species_id) REFERENCES Species(id),
    CONSTRAINT FK_Owner_Trees FOREIGN KEY (owner_id) REFERENCES Users(id)
);

-- Tabla de Actualizaciones de Árboles (Growth tracking over time)
CREATE TABLE Tree_Updates (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tree_id INT NOT NULL,
    update_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    size DECIMAL(10, 2), -- Perimeter of the tree
    height DECIMAL(10, 2), -- Current height of the tree 
    growth_rate DECIMAL(5, 2), -- Growth rate calculated via program in feet per month
    health_status VARCHAR(50) NOT NULL DEFAULT 'Healthy', -- Status of the tree's health (default is 'Healthy')
    image_url VARCHAR(255), -- URL for tree growth images (optional for visual tracking)
    status VARCHAR(10) NOT NULL CHECK (status IN ('available', 'sold')),
    CONSTRAINT FK_Tree_TreeUpdates FOREIGN KEY (tree_id) REFERENCES Trees(id)
);

-- Tabla de Ventas (Tree sales)
CREATE TABLE Sales (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tree_id INT NOT NULL,
    buyer_id INT NOT NULL,
    sale_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_Tree_Sales FOREIGN KEY (tree_id) REFERENCES Trees(id),
    CONSTRAINT FK_Buyer_Sales FOREIGN KEY (buyer_id) REFERENCES Users(id)
);

-- Insert Usuarios
INSERT INTO Users (name, email, password, role, phone, address, country) VALUES 
('Admin1', 'admin1@example.com', 'AdminPass', 'admin', '123', '123 Main St', 'USA'),
('Operator1', 'ope1@example.com', 'OperatorPass', 'operator', '123', '456 Elm', 'USA'),
('Friend1', 'friend1@example.com', 'FriendPass', 'friend', '123', '789 Oak St', 'USA'),
('Friend2', 'friend2@example.com', 'FriendPass', 'friend', '555', '101 Pine St', 'USA'),
('Friend3', 'friend3@example.com', 'FriendPass', 'friend', '556', '102 Cedar St', 'USA'),
('Friend4', 'friend4@example.com', 'FriendPass', 'friend', '557', '103 Maple St', 'USA'),
('Friend5', 'friend5@example.com', 'FriendPass', 'friend', '558', '104 Birch St', 'USA'),
('Friend6', 'friend6@example.com', 'FriendPass', 'friend', '559', '105 Spruce St', 'USA');

-- Insert Especies
INSERT INTO Species (commercial_name, scientific_name, availability_date) VALUES 
('Oak Tree', 'Quercus robur', '2024-10-20 00:00:00'),
('Pine Tree', 'Pinus sylvestris', '2024-10-25 00:00:00'),
('Maple Tree', 'Acer saccharum', '2024-11-01 00:00:00');

-- Insert Árboles, 3 Árboles del admin, 3 Árboles para el operador y 3 Árboles para el amigo

INSERT INTO Trees (species_id, location, price, photo_url) VALUES 
(1, 'Garden Center', 150.00, 'http://example.com/oak_tree.jpg'),
(2, 'Community Park', 200.00, 'http://example.com/pine_tree.jpg'),
(3, 'School Yard', 175.00, 'http://example.com/maple_tree.jpg');

INSERT INTO Trees (species_id, owner_id, location, price, photo_url) VALUES 
(1, 2, 'City Park', 180.00, 'http://example.com/operator_oak_tree.jpg'),
(2, 2, 'Riverbank', 210.00, 'http://example.com/operator_pine_tree.jpg'),
(3, 2, 'Botanical Garden', 190.00, 'http://example.com/operator_maple_tree.jpg');

INSERT INTO Trees (species_id, owner_id, location, price, photo_url) VALUES 
(1, 3, 'Home Backyard', 160.00, 'http://example.com/friend_oak_tree.jpg'),
(2, 3, 'Neighborhood Park', 220.00, 'http://example.com/friend_pine_tree.jpg'),
(3, 3, 'School Playground', 175.00, 'http://example.com/friend_maple_tree.jpg');

-- Insert Update de los árboles
INSERT INTO Tree_Updates (tree_id, update_date, size, height, growth_rate, health_status, image_url, status) VALUES 
(1, '2024-10-05', 15.00, 11.00, 0.50, 'Healthy', 'http://example.com/photos/oak_tree_growth1.jpg', 'available'), 
(2, '2024-10-10', 10.00, 9.00, 0.30, 'Healthy', 'http://example.com/photos/maple_tree_growth1.jpg', 'available'), 
(3, '2024-10-15', 20.00, 12.00, 0.20, 'Needs Care', 'http://example.com/photos/pine_tree_growth1.jpg', 'available');

-- Insert Ventas
INSERT INTO Sales (tree_id, buyer_id) VALUES 
(1, 1),(2, 1),(3, 1),(4, 2),(5, 2),(6, 2),(7, 3), (8, 3),(9, 3);

-- Select//
    -- Obtener todos los árboles disponibles
    SELECT * FROM Trees WHERE available = TRUE ORDER BY price ASC;

    -- Filtrar árboles por especie
    SELECT * FROM Trees WHERE species_id = :species_id ORDER BY height DESC;

    -- Obtener todas las actualizaciones de un árbol específico
    SELECT * FROM Tree_Updates WHERE tree_id = :tree_id ORDER BY update_date DESC;

    -- Obtener la actualización más reciente
    SELECT * FROM Tree_Updates WHERE tree_id = :tree_id AND update_date > CURRENT_TIMESTAMP ORDER BY update_date DESC LIMIT 1;

    -- Contar árboles disponibles por especie
    SELECT species_id, COUNT(*) AS total_available_trees FROM Trees WHERE available = TRUE GROUP BY species_id;

    -- Obtener todas las ventas de un comprador específico
    SELECT * FROM Sales WHERE buyer_id = :buyer_id ORDER BY sale_date DESC;

    -- Obtener árboles por rango de precio
    SELECT * FROM Trees WHERE price BETWEEN :min_price AND :max_price ORDER BY price ASC;

    -- Obtener todos los usuarios
    SELECT id, name, email, role, phone, country FROM Users;

    -- Obtener todas las especies existentes
    SELECT id, commercial_name, scientific_name FROM Species;

    -- Obtener info de un árbol por ID
    SELECT t.id, t.height, t.location, t.price, t.photo_url, t.available, s.commercial_name, s.scientific_name, u.name AS owner_name FROM Trees t JOIN Species s ON t.species_id = s.id LEFT JOIN Users u ON t.owner_id = u.id WHERE t.id = <tree_id>; -- Asegúrate de reemplazar <tree_id> con el valor real o el marcador de posición

    -- Obtener todos los árboles disponibles para venta
    SELECT t.id, t.height, t.location, t.price, t.photo_url, s.commercial_name, s.scientific_name FROM Trees t JOIN Species s ON t.species_id = s.id WHERE t.available = TRUE; -- Cambiado de status a available

    -- Obtener toda la información de un usuario, así como toda la información de todos los árboles que ha comprado (para probar en localhost de SQL)
    SELECT u.id AS user_id,u.name AS user_name,u.email AS user_email,u.phone AS user_phone,u.address AS user_address,u.country AS user_country,t.id AS tree_id,t.height AS tree_height,t.location AS tree_location,t.price AS tree_price,t.available AS tree_available,s.commercial_name AS species_commercial_name,s.scientific_name AS species_scientific_name FROM Users u LEFT JOIN Sales sa ON u.id = sa.buyer_id LEFT JOIN Trees t ON sa.tree_id = t.id LEFT JOIN Species s ON t.species_id = s.id WHERE u.id = <user_id>;

-- Update//
    -- Actualizar el estado de disponibilidad de un árbol
    UPDATE Trees SET available = TRUE WHERE id = :tree_id;

    -- Actualizar la altura de un árbol
    UPDATE Trees SET height = :new_height WHERE id = :tree_id;

    -- Actualizar el estado de salud de un árbol
    UPDATE Tree_Updates SET health_status = :new_status WHERE tree_id = :tree_id;

    -- Actualizar la disponibilidad de los árboles en tanto su usuario tenga como roll Admin u Operador
    UPDATE Trees t JOIN Users u ON t.owner_id = u.id SET t.available = TRUE WHERE u.role IN ('admin', 'operator');

-- Drops//
    DROP TABLE IF EXISTS Sales;

    DROP TABLE IF EXISTS Tree_Updates;

    DROP TABLE IF EXISTS Trees;

    DROP TABLE IF EXISTS Species;

    DROP TABLE IF EXISTS Users;